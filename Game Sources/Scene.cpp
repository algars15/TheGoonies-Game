#include "Scene.h"
#include "Entity.h"
#include "Player.h"
#include "TileMap.h"
#include "Enemy.h"
#include <stdio.h>
#include "Globals.h"
#include "Game.h"

Scene::Scene()
{	player = nullptr;
    level = nullptr;
	enemy = nullptr;
	sfxItem = { 0 };
	
	camera.target = { 0, 0 };				//Center of the screen
	camera.offset = { 0, MARGIN_GUI_Y };	//Offset from the target (center of the screen)
	camera.rotation = 0.0f;					//No rotation
	camera.zoom = 1.0f;						//Default zoom

	debug = DebugMode::OFF;
}
Scene::~Scene()
{
	if (player != nullptr)
	{
		player->Release();
		delete player;
		player = nullptr;
	}
	if (enemy != nullptr)
	{
		enemy->Release();
		delete enemy;
		enemy = nullptr;
	}
    if (level != nullptr)
    {
		level->Release();
        delete level;
        level = nullptr;
    }
	for (Entity* obj : objects)
	{
		delete obj;
	}
	objects.clear();
	UnloadSound(sfxItem);
}
AppStatus Scene::Init()
{
	//Create player
	player = new Player({ 0,0 }, State::IDLE, Look::RIGHT);
	if (player == nullptr)
	{
		LOG("Failed to allocate memory for Player");
		return AppStatus::ERROR;
	}
	//Initialise player
	if (player->Initialise() != AppStatus::OK)
	{
		LOG("Failed to initialise Player");
		return AppStatus::ERROR;
	}
	//Create enemy 
	enemy = new Enemy({ 0,0 }, EnemyState::WALKING_LEFT);
	if (enemy == nullptr)
	{
		LOG("Failed to allocate memory for Enemy");
		return AppStatus::ERROR;
	}
	//Initialise enemy
	if (enemy->Initialize() != AppStatus::OK)
	{
		LOG("Failed to initialise Enemy");
		return AppStatus::ERROR;
	}
	//Create level 
    level = new TileMap();
    if (level == nullptr)
    {
        LOG("Failed to allocate memory for Level");
        return AppStatus::ERROR;
    }
	//Initialise level
	if (level->Initialise() != AppStatus::OK)
	{
		LOG("Failed to initialise Level");
		return AppStatus::ERROR;
	}
	//Initialise player score
	player->InitScore();
	//Initialise player lives
	player->InitLives();
	//Initialise player experience
	player->InitExp();
	//Initialise player keys
	player->setKey(false);
	//Initialise player skull door
	player->setSkullDoor(false);
	//Load level
	if (LoadLevel(1) != AppStatus::OK)
	{
		LOG("Failed to load Level 1");
		return AppStatus::ERROR;
	}
	//Assign the tile map reference to the player to check collisions while navigating
	player->SetTileMap(level);
	enemy->SetTileMap(level);
	//Load sound effects
	sfxItem = LoadSound("fx/key.wav");
	
    return AppStatus::OK;
}
AppStatus Scene::LoadLevel(int stage)
{
	int size;
	int x, y, i;
	Tile tile;
	Point pos;
	int *map = nullptr;
	Object *obj;
	
	ClearLevel();

	size = LEVEL_WIDTH * LEVEL_HEIGHT;
	
	if (stage == 1)
	{
		SetStage(1);
		map = new int[size] { 
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 145, 146, 147,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, //34
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 148, 149, 150,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
			 0,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,	  2,   1,   2,   1,   2,   1,   2,   1,	  2,   1,   2,   1,   0,
			 0,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,	  1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   0,
			 0,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,	  2,   1,   2,   1,   2,   1,   2,   1,	  2,   1,   2,   1,   0,
			 0,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,	  1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   0,
			 0,  30,   7,   8,   9,  10,   7,   8,   9,  10,   7,   8,   9,  10,   7,   8,   9,  10,   7,   8,   9,  10,   7,   8,  20,  24,   7,   8,   9,  10,   7,   8,   9,   0,
			 0,  32,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  21,  25,   0,   0,   0,   0,   0,   0,   0,   0,
			 0,  33,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  22,  26,   0,   0,   0,	  0,   0,   0,   0,   0,
			 0,  32,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  23,  27,   0,   0,   0,   0,   0,   0,   0,   0,
			 0,  33,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,	  0,   0,   0,   0,   0,
			 0,  32,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
			 0,  33,   0,   0,   0,   0,   0, 130,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,	  0,   0,   0,   0,   0,   0,   0,   0,	  0,   0,   0,   0,   0,
			 0,  32,   0,   0,   0,   0,   0,   0,   0,   0,   0, 151,   0,   0,   0,   0,   0,   0,   0,   0,   0,	  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
			 0,  33,   0,   0,  14,  11,  70,  14,  15,  16,  14,  11,  12,  13,  14,  11,  12,  13,  70,  14,  11,	  0,   0,   0,   0,   0,   0,   0,  11,	 14,  70,  14,  31,   0,
			 0,  32,   0,   0,  76,  73,  71,  76,  77,  78,  76,  73,  74,  75,  76,  73,  74,  75,  71,  76,  73,	  0,   0,   0,   0,   0,   0,   0,  73,  76,  71,  76,  39,   0,
			 0,  33,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,	  0,   0,   0,   0,   0,   0,   0,   0,	  0,  71,   0,  17,   0,
			 0,  32,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,	  0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,  18,   0,
			 0,  33,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,	  0,   0,   0,   0,   0,   0,   0,   0,	  0,  71,   0,  18,   0,
			 0,  34,   0,   0,   0,   0,  71,   0,   0, 131,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,	  0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,  19,   0,
			 0,   3,   3,   3,   3,   3,  72,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,  72,   3,   3,	  3,   3,   3,   3,   3,   3,   3,   3,   3,  72,   3,   3,   0, 
			 0,   6,   2,   1,   5,   1,   2,   5,   5,   6,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,	  1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   0, 
			 0,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,	  2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   0,  
			 0,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,	  1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   0, 
			 0, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144,   0,
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
             //28
		};
		
	}
	else if (stage == 2)
	{
		SetStage(2);
		
		map = new int[size] {
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 145, 146, 147,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, //34
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 148, 149, 150,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
			 0,  30,   7,   8,   9,  10,   7,   8,   9,  10,   7,   8,   9,  10,   7,   8,   9,  10,   7,   8,   9,  10,   7,   8,  20,  24,   7,   8,   9,  10,   7,   8,   9,   0,
			 0,  32,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   
			 0,  32,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   
			 0,  33,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
			 0,   0,   0,   0,   0,   0,   0,   0,  14,  11,  70,  12,  13,  11,  14,  12,  13,  11,  14,  12,  13,  11,  14,  12,  13,  11,  14,  12,  13,  13,  11,  14,  12,   0,
			 0,   0,   0,   0,   0,   0,   0,   0,  75,  73,  71,  74,  75,  73,  76,  74,  75,  73,  76,  74,  75,  73,  76,  74,  75,  73,  76,  74,  75,	 75,  73,  76,  74,   0,
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,	  0,   0,   0,   0,   0,   0,   0,   0,	  0,   0,   0,   0,   0,
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,	  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
			 0,  31,  11,  14,  12,  13,  11,  14,  12,  13,  72,  14,  36,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  36,  14,  11,  12,   0,
			 0,  38,  73,  76,  74,  75,  73,  76,  74,  75,  73,  76,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  76,  73,  74,   0,
			 0,  32,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,	  0,   0,   0,   0,   0,   0,   0,   0,	  0,   0,   0,   0,   0,
			 0,  32,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,	  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
			 0,  33,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,	  0,   0,   0,   0,   0,   0,   0,   0,	  0,   0,   0,   0,   0,
			 0,  33,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,	  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
			 0, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121,   0, 
			 0, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121,   0, 
			 0, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121,   0,  
			 0, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121,   0, 
			 0, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144,   0,
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
		};
		
	}
	else if (stage == 3)
	{
		SetStage(3);
		map = new int[size] {
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 145, 146, 147,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, //34
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 148, 149, 150,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
			 0,  10,   7,   8,   9,  10,   7,   8,   9,  10,   7,   8,   9,  10,   7,   8,   9,  10,   7,   8,   9,  10,   7,   8,  20,  24,   7,   8,   9,  10,   7,   8,   9,   0,
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,  11,  14,  12,  13,  70,  14,  12,  13,  11,  14,  12,  13,  70,  14,  12,   0,
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  75,  73,  76,  74,  75,  71,  76,  74,  75,  73,  76,  74,  75,  71,  76,  74,   0,
			 0,  13,  11,  14,  12,  13,  11,  14,  12,  13,  14,  70,  14,  11,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,
			 0,  75,  73,  76,  74,  75,  73,  76,  74,  75,  76,  71,  76,  73,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,
			 0,   0,   0,   0,   0,   0,   0, 130,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,	  0,  71,   0,   0,   0,   0,   0,   0,	  0,  71,   0,   0,   0,
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,	  0,  71,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,
			 0,  31,  11,  14,  12,  13,  11,  14,  12,  13,  14,  72,  12,  13,  70,  11,  13,   0,   0,   0,  11,  14,  72,  14,  12,  13,  14,  70,  12,  13,  72,  14,  11,   0,
			 0,  38,  73,  76,  74,  75,  73,  76,  74,  75,  76,  73,  74,  75,  71,  73,  75,   0,   0,   0,  73,  76,  73,  76,  74,  75,  76,  71,  74,  75,  76,  76,  73,   0,
			 0,  32,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,	  0,   0,   0,   0,   0,   0,  71,   0,	  0,   0,   0,   0,   0,
			 0,  32,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,	  0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,
			 0,  33,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,	  0,   0,   0,   0,   0,   0,  71,   0,	  0,   0,   0,   0,   0,
			 0,  34,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,	  0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,
			 0,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,  72,   3,   3,   3,   3,   3,   3,	  3,   3,   3,   3,   3,   3,  72,   3,   3,   3,   3,   3,   0, 
			 0,   6,   2,   1,   5,   1,   2,   5,   5,   6,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,	  1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   0, 
			 0,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,	  2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   0,  
			 0,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,	  1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   1,   2,   0, 
			 0, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144,   0,
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
		};
		
	}
	else if (stage == 4)
	{
		player->setSkullDoor(false);
		SetStage(4);
		map = new int[size] {
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 145, 146, 147,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, //34
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 148, 149, 150,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
			 0,  10,   7,   8,   9,  10,   7,   8,   9,  10,   7,   8,   9,  10,   7,   8,   9,  10,   7,   8,   9,  10,   7,   8,  20,  24,   7,   8,   9,  10,   7,   8,  39,   0,
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  18,   0,   
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  17,   0,
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  79,  82,  85,   0,   0,   0,   0,   0,   0,   0,   0,  79,  82,  85,   0,   0,   0,   0,  18,   0,
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  80,  83,  86,   0,   0,   0,   0,   0,   0,   0,   0,  80,  83,  86,   0,   0,   0,   0,  18,   0,
			 0,  13,  11,  70,  12,  13,  11,  14,  12,   0,   0,   0,   0,   0,  81,  84,  87,   0,   0,   0,   0,   0,   0,   0,   0,  81,  84,  87,   0,   0,   0,   0,  17,   0,
			 0,  75,  73,  71,  74,  75,  73,  76,  74,   0,   0,   0,  11,  14,  12,  13,  11,  13,  11,  70,  12,  13,  11,  14,  12,  13,  11,  14,  12,  13,   0,   0,  18,   0,
			 0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,  73,  76,  74,  75,  73,  75,  73,  71,  74,  75,  73,  76,  74,  75,  73,  76,  74,  75,   0,   0,  18,   0,
			 0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  17,   0,
			 0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  17,   0,
			 0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,	  0,   0,   0,   0,   0,   0,   0,   0,	  0,   0,   0,  18,   0,
			 0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,	  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  19,   0,
			 0,  13,  11,  72,  12,  13,  70,  14,  12,   0,   0,   0,   0,   0,   0,   0,   0,  12,  14,  72,  14,  12,  70,  14,  31,   3,   3,   3,   3,   3,   3,   3,   3,   0,
			 0,  75,  73,  76,  74,  75,  71,  76,  74,   0,   0,   0,   0,   0,   0,   0,   0,  75,  76,  73,  74,  75,  71,  76,  39,   2,   1,   2,   1,   2,   2,   1,   2,   0,
			 0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,  18,   1,   2,   1,   2,   1,   1,   2,   1,   0,
			 0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,  17,   2,   1,   2,   1,   2,   2,   1,   2,   0,
			 0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,  18,   1,   2,   1,   2,   1,   1,   2,   1,   0,
			 0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,  18,   2,   1,   2,   1,   2,   2,   1,   2,   0,
			 0,  31,  11,  14,  12,  13,  72,  14,  12,  13,  14,  11,  12,  13,  70,  11,  13,   0,   0,   0,   0,   0,  71,   0,  17,   1,   2,   1,   2,   1,   1,   2,   1,   0, 
			 0,  38,  73,  76,  74,  75,  73,  76,  74,  75,  76,  73,  74,  75,  71,  73,  75,   0,   0,   0,   0,   0,  71,   0,  18,   2,   1,   2,   1,   2,   2,   1,   2,   0, 
			 0,  32,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,  71,   0,  18,   1,   2,   1,   2,   1,   1,   2,   1,   0,  
			 0,  34,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,  71,   0,  19,   2,   1,   2,   1,   2,   2,   1,   2,   0,  
			 0,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,  72,   3,   3,   3,   3,   3,   3,   3,  72,   3,   3,   1,   2,   1,   2,   1,   1,   2,   1,   0, 
			 0, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144,   0,
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
		};
		
	}
	else if (stage == 5)
	{
		player->setSkullDoor(false);
		SetStage(5);
		map = new int[size] {
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 145, 146, 147,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, //34
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 148, 149, 150,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
			 0,  44,  94,  95,  96,  97,  94,  95,  96,  97,  94,  95,  96,  97,  94,  95,  96,  97,  94,  95,  96,  97,  94,  95,  96,  97,  94,  95,  96,  97,  94,  95, 153,   0,
			 0,  45,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 154,   0,   
			 0,  46,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 155,   0,
			 0,  45,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 156,   0,
			 0,  45,   0,   0,   0,   0,   0,   0,   0,  54,  51,  88,  52,  53,  54,  51,  52,  53,  54,  51,  53,  54,  51,  52,  53,   0,   0,   0,   0,   0,   0,   0, 155,   0,
			 0,  46,   0,   0,   0,   0,   0,   0,   0,  93,  90,  71,  91,  92,  93,  90,  91,  92,  93,  90,  92,  93,  90,  91,  92,   0,   0,   0,   0,   0,   0,   0, 156,   0,
			 0,  45,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 154,   0,
			 0,  46,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  79,  82,  85,   0,   0,   0,   0, 155,   0,
			 0,  47,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  80,  83,  86,   0,   0,   0,   0, 156,   0,
			 0,  50,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  81,  84,  87,   0,   0,   0,   0, 157,   0,
			 0,  48,  51,  52,  53,  54,  88,  52,  53,  54,  51,  89,  53,  54,  51,  52,  53,  54,  51,  52,  53,  54,  88,  52,  53,  54,  51,  52,  53,  54,  51,  52,  48,   0,
			 0,  49,  90,  91,  92,  93,  71,  91,  92,  93,  90,  91,  92,  93,  90,  91,  92,  93,  90,  91,  92,  93,  71,  91,  92,  93,  90,  91,  92,  93,  90,  91, 159,   0,
			 0,  45,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0, 154,   0,
			 0,  46,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0, 155,   0,
			 0,  45,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0, 156,   0,
			 0,  46,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0, 155,   0,
			 0,  45,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0, 156,   0,
			 0,  45,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0, 154,   0,
			 0,  46,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0, 155,   0, 
			 0,  45,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0, 156,   0, 
			 0,  46,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0, 154,   0,  
			 0,  47,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0, 155,   0,  
			 0,  45,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0, 156,   0, 
			 0, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144,   0,
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
		};
		
	}
	else if (stage == 6)
	{
		
		SetStage(6);
		map = new int[size] {
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 145, 146, 147,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, //34
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 148, 149, 150,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
			 0,  44,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0, 154,   0,
			 0,  45,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0, 154,   0,   
			 0,  46,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0, 155,   0,
			 0,  45,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0, 156,   0,
			 0,  45,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0, 154,   0,
			 0,  46,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0, 155,   0,
			 0,  45,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0, 156,   0,
			 0,  46,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0, 157,   0,
			 0,  47,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,  51,  52,  88,  52,  53,  54,  51,  52,  53,  54,  89,  51,  48,  40,  42,  40,  42,  40,  42,  40,  41,   0,
			 0,  45,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,  90,  91,  71,  91,  92,  93,  90,  91,  92,  93,  90,  91, 159,  41,  43,  41,  43,  41,  43,  41,  43,   0,
			 0,  46,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0, 154,  43,  41,  43,  41,  43,  41,  43,  41,   0,
			 0,  47,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0, 155,  41,  43,  41,  43,  41,  43,  41,  43,   0,
			 0,  45,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0, 156,  43,  41,  43,  41,  43,  41,  43,  41,   0,
			 0,  46,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  97,  94,  95,  96,  97,  94,  95, 153,   0,
			 0,  45,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 154,   0,
			 0,  46,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 155,   0,
			 0,  45,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 156,   0,
			 0,  45,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 157,   0,
			 0,  46,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,  51,  52,  89,  52,  53,  54,  51,  52,  52,  53,  54,  51,  52,  53,  54,  88,  52,  53,  54,  51,  48,   0, 
			 0,  45,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,  90,  91,  90,  91,  92,  93,  90,  92,  91,  92,  93,  90,  91,  92,  93,  71,  91,  92,  93,  90, 159,   0, 
			 0,  46,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0, 154,   0,  
			 0,  47,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0, 155,   0,  
			 0,  45,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0, 156,   0, 
			 0, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144,   0,
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
		};
		
	}
	else if (stage == 7)
	{
		player->setSkullDoor(false);
		SetStage(7);
		map = new int[size] {
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 145, 146, 147,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, //34
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 148, 149, 150,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
			 0,  44,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0, 154,   0,
			 0,  45,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0, 154,   0,   
			 0,  46,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0, 155,   0,
			 0,  45,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,  79,  82,  85,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0, 156,   0,
			 0,  47,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,  80,  83,  86,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0, 154,   0,
			 0,  50,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,  81,  84,  87,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0, 155,   0,
			 0,  48,  51,  88,  53,  54,  89,  52,  53,   0,   0,   0,  51,  52,  51,  52,  53,  54,  51,  52,  53,  54,   0,   0,   0,  54,  52,  89,  53,  54,  88,  51,  48,   0,
			 0,  49,  90,  71,  92,  93,  90,  91,  92,   0,   0,   0,  90,  91,  90,  91,  92,  93,  90,  91,  92,  93,   0,   0,   0,  93,  91,  90,  92,  93,  71,  90, 153,   0,
			 0,  47,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0, 154,   0,
			 0,  45,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0, 155,   0,
			 0,  47,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0, 156,   0,
			 0,  50,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0, 157,   0,
			 0,  48,  51,  89,  53,  54,  51,  52,  53,  54,  51,  52,  53,  54,  51,  52,  53,  54,  51,  52,  53,  54,  51,  52,  53,  54,  51,  52,  53,  54,  89,  52,  48,   0,
			 0,  49,  90,  91,  92,  93,  90,  91,  92,  93,  90,  91,  92,  93,  90,  91,  92,  93,  90,  91,  92,  93,  90,  91,  92,  93,  90,  91,  92,  93,  90,  91, 159,   0,
			 0,  49,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 154,   0,
			 0,  46,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 155,   0,
			 0,  45,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 156,   0,
			 0,  45,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 154,   0,
			 0, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122,   0, 
			 0, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123,   0, 
			 0, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122,   0,
			 0, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123,   0,
			 0, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122, 123, 122,   0,
			 0, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144,   0,
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
		};
		
	}
	else if (stage == 8)
	{
		player->setSkullDoor(false);
		SetStage(8);
		map = new int[size] {
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 145, 146, 147,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, //34
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 148, 149, 150,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
			 0,  30,   7,   8,   9,  10,   7,   8,   9,  10,   7,   8,   9,  10,   7,   8,   9,  10,   7,   8,   9,  10,   7,   8,  20,  24,   7,   8,   9,  10,   7,   8,   9,   0,
			 0,  33,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   
			 0,  32,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
			 0,  33,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
			 0,  32,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
			 0,  33,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
			 0,  34,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  79,  82,  85,   0,   0,   0,   0,   0,   0,
			 0,  31,  14,  11,  12,  13,  70,  11,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  80,  83,  86,   0,   0,   0,   0,   0,   0,
			 0,  38,  76,  73,  74,  75,  71,  73,  74,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  81,  84,  87,   0,   0,   0,   0,   0,   0,
			 0,  33,   0,   0,   0,   0,  71,   0,   0,  13,  11,  70,  12,  13,  11,  14,  12,  13,  11,  14,  12,  13,  11,  14,  12,  13,  11,  14,  12,  13,  11,  14,  12,   0,
			 0,  32,   0,   0,   0,   0,  71,   0,   0,  75,  73,  71,  74,  75,  73,  76,  74,  75,  73,  76,  74,  75,  73,  76,  74,  75,  73,  76,  74,  75,  73,  76,  74,   0,
			 0,  33,   0,   0,   0,   0,  71,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
			 0,  34,   0,   0,   0,   0,  71,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
			 0,  31,  14,  70,  12,  13,  72,  14,  12,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
			 0,  38,  76,  71,  74,  75,  73,  76,  74,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
			 0,  33,   0,  71,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
			 0,  32,   0,  71,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
			 0,  33,   0,  71,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
			 0,  32,   0,  71,   0,   0,   0,   0,   0,  13,  11,  72,  12,  13,  11,  14,  12,  13,  11,  14,  12,  13,  14,  12,  13,  11,  70,  12,  13,  11,  14,  12,  13,   0, 
			 0,  33,   0,  71,   0,   0,   0,   0,   0,  75,  73,  73,  74,  75,  73,  76,  74,  75,  73,  76,  74,  75,  76,  74,  75,  73,  71,  74,  75,  73,  76,  74,  75,   0, 
			 0,  32,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,
			 0,  33,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,
			 0,  32,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,
			 0, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144,   0,
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
		};
		
	}
	else if (stage == 9)
	{
		
		SetStage(9);
		map = new int[size] {
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 145, 146, 147,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, //34
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 148, 149, 150,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
			 0,  10,   7,   8,   9,  10,   7,   8,   9,  10,   7,   8,   9,  10,   7,   8,   9,  10,   7,   8,  20,  24,   7,   8,   9,  10,   7,   8,   9,  10,   7,   8,  39,   0,
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  18,   0,   
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  17,   0,
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  18,   0,
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  17,   0,
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  18,   0,
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  19,   0,
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,  11,  14,  12,  13,  70,  14,  31,   0,
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  75,  73,  76,  74,  75,  71,  76,  39,   0,
			 0,  13,  14,  70,  12,  13,  14,  11,  12,  13,  14,  11,  12,  13,  11,  14,  12,  13,  11,  14,  12,  13,  11,  14,  12,   0,   0,   0,   0,   0,  71,   0,  17,   0,
			 0,  75,  76,  71,  74,  75,  76,  73,  74,  75,  76,  73,  74,  75,  73,  76,  74,  75,  73,  76,  74,  75,  73,  76,  74,   0,   0,   0,   0,   0,  71,   0,  17,   0,
			 0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,  18,   0,
			 0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,  19,   0,
			 0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,  11,  70,  12,  13,  72,  12,  31,   0,
			 0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  75,  73,  71,  74,  75,  76,  74,  39,   0,
			 0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,  17,   0,
			 0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,  18,   0,
			 0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,  19,   0,
			 0,  13,  14,  72,  14,  11,  14,  11,  12,   0,   0,   0,   0,   0,   0,   0,   0,  13,  11,  70,  12,  13,  14,  12,  13,  11,  14,  12,  13,  11,  70,  14,  31,   0, 
			 0,  75,  76,  73,  76,  73,  76,  73,  74,   0,   0,   0,   0,   0,   0,   0,   0,  75,  73,  71,  74,  75,  76,  74,  75,  73,  76,  74,  75,  73,  71,  76,  39,   0, 
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,  17,   0,
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,  18,   0,
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,  17,   0,
			 0, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144,   0,
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
		};
		
	}
	else if (stage == 10)
	{
		
		SetStage(10);
		map = new int[size] {
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 145, 146, 147,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, //34
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 148, 149, 150,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
			 0,  30,   7,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,
			 0,  33,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   
			 0,  32,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,
			 0,  33,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,
			 0,  32,   0,  71,   0,   0,   0,   0,   0,  13,  11,  70,  12,  13,  11,  14,  12,  13,  11,  14,  12,  13,  11,  14,  12,  13,  72,  11,  14,  12,  13,  14,  12,   0,
			 0,  33,   0,  71,   0,  79,  82,  85,   0,  75,  73,  71,  74,  75,  73,  76,  74,  75,  73,  76,  74,  75,  73,  76,  74,  75,  76,  73,  76,  74,  75,  76,  74,   0,
			 0,  32,   0,  71,   0,  80,  83,  86,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
			 0,  34,   0,  71,   0,  81,  84,  87,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
			 0,  31,  14,  72,  12,  13,  70,  11,  12,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
			 0,  38,  76,  73,  74,  75,  71,  73,  74,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
			 0,  33,   0,   0,   0,   0,  71,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
			 0,  32,   0,   0,   0,   0,  71,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
			 0,  33,   0,   0,   0,   0,  71,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
			 0,  34,   0,   0,   0,   0,  71,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
			 0,  31,  14,  11,  12,  13,  72,  14,  12,  13,  11,  72,  12,  13,  70,  14,  12,   0,   0,   0,   0,   0,   0,   0,   0,  13,  11,  70,  12,  13,  11,  14,  12,   0,
			 0,  38,  76,  73,  74,  75,  73,  76,  74,  75,  73,  73,  74,  75,  71,  76,  74,   0,   0,   0,   0,   0,   0,   0,   0,  75,  73,  71,  74,  75,  73,  76,  74,   0,
			 0,  32,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,
			 0,  33,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,
			 0,  32,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0, 
			 0,  34,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0, 
			 0,  31,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,  72,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,  72,   3,   3,   3,   3,   3,   0,
			 0, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121,   0,
			 0, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120,   0,
			 0, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144,   0,
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
		};
		
	}
	else if (stage == 11)
	{
		player->setSkullDoor(false);
		SetStage(11);
		map = new int[size] {
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 145, 146, 147,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, //34
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 148, 149, 150,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,
			 0,  13,  11,  70,  12,  13,  11,  14,  12,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,  13,  72,  70,  14,  12,  72,  11,  12,   0,
			 0,  75,  73,  71,  74,  75,  73,  76,  74,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,  75,  76,  71,  76,  74,  76,  73,  74,   0,
			 0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,
			 0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,
			 0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,
			 0,   0,   0,  71,   0,   0,   0,   0,   0,  13,  11,  70,  12,  13,  11,  14,  12,  13,  11,  72,  12,  13,  11,  14,  12,   0,   0,  71,   0,   0,   0,   0,   0,   0,
			 0,   0,   0,  71,   0,   0,   0,   0,   0,  75,  73,  71,  74,  75,  73,  76,  74,  75,  73,  76,  74,  75,  73,  76,  74,   0,   0,  71,   0,   0,   0,   0,   0,   0,
			 0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,
			 0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,
			 0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,
			 0,  13,  14,  72,  12,  13,  11,  14,  12,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,  11,  72,  12,  13,  70,  14,  12,   0,
			 0,  75,  76,  73,  74,  75,  73,  76,  74,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  75,  73,  76,  74,  75,  71,  76,  74,   0,
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,  79,  82,  85,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,  80,  83,  86,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0, 
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,  81,  84,  87,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0, 
			 0,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,  72,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,  72,   3,   3,   0,
			 0, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121,   0,
			 0, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120, 121, 120,   0,
			 0, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144,   0,
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
		};
		
	}
	else if (stage == 12)
	{
		player->setSkullDoor(false);
		SetStage(12);
		map = new int[size] {
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 145, 146, 147,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, //34
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 148, 149, 150,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
			 0,  59, 104, 105, 106, 107, 104, 105, 106, 107, 104, 105, 106, 107, 104, 105, 106, 107, 104, 105, 106, 107, 104, 105, 106, 107, 104, 105, 106, 107, 105, 104, 160,   0,
			 0,  60,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 161,   0,   
			 0,  60,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  79,  82,  85,   0,   0,   0,   0,   0, 161,   0,
			 0,  61,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  80,  83,  86,   0,   0,   0,   0,   0, 162,   0,
			 0,  61,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  81,  84,  87,   0,   0,   0,   0,   0, 162,   0,
			 0,  60,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  69,  66,  98,  68,  69,  66,  67,  68,  69,  67,  98,  67,  66,   0,   0, 161,   0,
			 0,  60,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 103, 100,  71, 102, 103, 100, 101, 102, 103, 101,  71, 101, 100,   0,   0, 161,   0,
			 0,  61,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0, 162,   0,
			 0,  61,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0, 162,   0,
			 0,  60,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0, 161,   0,
			 0,  60,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0, 162,   0,
			 0,  61,   0,   0,  66,  67,  98,  67,  68,  69,  66,  67,  68,  69,  66,  67,  68,  69,  66,  99,  68,  69,  66,  67,  68,  69,  66,  99,  68,  69,   0,   0, 162,   0,
			 0,  61,   0,   0, 100, 101,  71, 101, 102, 103, 100, 101, 102, 103, 100, 101, 102, 103, 100, 101, 102, 103, 100, 101, 102, 103, 100, 101, 102, 103,   0,   0, 161,   0,
			 0,  60,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 161,   0,
			 0,  61,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 162,   0,
			 0,  61,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  65,   0,
			 0,  60,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  69,  66,  67,  68,  69,  66,  67,  68,  69,  67,  98,  68,  69,  66,  67, 165,   0,
			 0, 164,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 103, 100, 101, 102, 103, 100, 101, 102, 103, 101,  71, 102, 103, 100, 101, 166,   0, 
			 0,  63,  66,  67,  68,  69,  99,  67,  68,  69,  66,  98,  68,  69,  66,  67,  68,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0, 161,   0, 
			 0,  64, 100, 101, 102, 103, 100, 101, 102, 103, 100,  71, 102, 103, 100, 101, 102,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0, 161,   0,
			 0,  60,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0, 162,   0,
			 0,  60,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0, 162,   0,
			 0,  61,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  71,   0,   0,   0,   0, 161,   0,
			 0, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144,   0,
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
			 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
		};
		
	}
	else
	{
		//Error level doesn't exist or incorrect level number
		LOG("Failed to load level, stage %d doesn't exist", stage);
		return AppStatus::ERROR;	
	}

	//Entities and objects
	i = 0;
	for (y = 0; y < LEVEL_HEIGHT; ++y)
	{
		for (x = 0; x < LEVEL_WIDTH; ++x)
		{
			tile = (Tile)map[i];
			if (tile == Tile::EMPTY)
			{
				map[i] = 0;
			}
			else if (tile == Tile::PLAYER)
			{
				pos.x = x * TILE_SIZE;
				pos.y = y * TILE_SIZE + TILE_SIZE - 1;
				player->SetPos(pos);
				map[i] = 0;
			}
			else if (tile == Tile::ENEMY)
{
				pos.x = x * TILE_SIZE;
				pos.y = y * TILE_SIZE + TILE_SIZE - 1;
				enemy->SetPos(pos);
				map[i] = 0;
			}
			else if (tile == Tile::KEY)
			{
				pos.x = x * TILE_SIZE;
				pos.y = y * TILE_SIZE + TILE_SIZE - 1;
				obj = new Object(pos, ObjectType::KEY);
				objects.push_back(obj);
				map[i] = 0;
			}
			else if (tile == Tile::OBJECT)
			{
				pos.x = x * TILE_SIZE;
				pos.y = y * TILE_SIZE + TILE_SIZE - 1;
				obj = new Object(pos, ObjectType::HELMET);
				objects.push_back(obj);
				map[i] = 0;
			}
			else if (tile == Tile::EXP)
			{
				pos.x = x * TILE_SIZE;
				pos.y = y * TILE_SIZE + TILE_SIZE - 1;
				obj = new Object(pos, ObjectType::EXP);
				objects.push_back(obj);
				map[i] = 0;
			}
			else if (tile == Tile::PONER_LLAVE)
			{
				pos.x = x * TILE_SIZE;
				pos.y = y * TILE_SIZE + TILE_SIZE - 1;
				obj = new Object(pos, ObjectType::PONER_LLAVE);
				objects.push_back(obj);
				map[i] = 0;
			}
			
			++i;
		}
	}
	//Tile map
	level->Load(map, LEVEL_WIDTH, LEVEL_HEIGHT);

	return AppStatus::OK;
}
void Scene::Update()
{
	Point pos;
	Point p1, p2;
	AABB box;

	//Switch between the different debug modes: off, on (sprites & hitboxes), on (hitboxes)  make appear position of the player too
	if (IsKeyPressed(KEY_F1))
	{
		debug = (DebugMode)(((int)debug + 1) % (int)DebugMode::SIZE);

	}
	//Debug levels instantly
	if (IsKeyPressed(KEY_ONE))
	{
		LoadLevel(1);
	}
	else if (IsKeyPressed(KEY_TWO))
	{
		LoadLevel(2);
	}
	else if (IsKeyPressed(KEY_THREE))
	{
		LoadLevel(3);
	}
	else if (IsKeyPressed(KEY_FOUR))
	{
		LoadLevel(4);
	}
	else if (IsKeyPressed(KEY_FIVE))
	{
		LoadLevel(5);
	}
	else if (IsKeyPressed(KEY_SIX))
	{
		LoadLevel(6);
	}
	else if (IsKeyPressed(KEY_SEVEN))
	{
		LoadLevel(7);
	}
	else if (IsKeyPressed(KEY_EIGHT))
	{
		LoadLevel(8);
	}
	else if (IsKeyPressed(KEY_NINE))
	{
		LoadLevel(9);
	}
	else if (IsKeyPressed(KEY_ZERO))
	{
		LoadLevel(10);
	}
	else if (IsKeyPressed(KEY_E))
	{
		LoadLevel(11);
	}
	else if (IsKeyPressed(KEY_R))
	{
		LoadLevel(12);
	}
	else if (IsKeyPressed(KEY_F2))
	{
		youWin=true;
	}
	else if (IsKeyPressed(KEY_F3))
	{
		youLose=true;
	}
	else if (player->NextLevel() && currentStage == 1)
	{
		LoadLevel(2);
		
		player->SetPos({ 10, player->GetY()});
	}
	else if (player->NextLevel() && currentStage == 2)
	{
		LoadLevel(3);
		player->SetPos({ 10, player->GetY() });
	}
	else if (player->NextLevel() && currentStage == 3)
	{
		LoadLevel(4);
		player->SetPos({ 10, player->GetY() });
	}
	else if (player->PrevLevel() && currentStage == 4)
	{
		LoadLevel(3);
		player->SetPos({ 250, player->GetY() });
	}
	else if (player->PrevLevel() && currentStage == 3)
	{
		LoadLevel(2);
		player->SetPos({ 250, player->GetY() });
	}
	else if (player->PrevLevel() && currentStage == 2)
	{
		LoadLevel(1);
		player->SetPos({ 250, player->GetY() });
	}
	else if (player->SkullDoor == true && currentStage == 4)
	{
		LoadLevel(5);
		player->SetPos({ 222, 95 });
	}
	else if (player->SkullDoor == true && currentStage == 5)
	{
		LoadLevel(4);
		player->SetPos({ 154, 63 });
	}
	else if (player->NextLevelY() && currentStage == 5)
	{
		LoadLevel(6);
		player->SetPos({ player->GetX(), 26});
	}

	else if (player->PrevLevelY() && currentStage == 6)
	{
		LoadLevel(5);
		player->SetPos({ player->GetX(), 195 });
	}

	else if (player->NextLevelY() && currentStage == 6)
	{
		LoadLevel(7);
		player->SetPos({ player->GetX(), 26 });
	}

	else if (player->PrevLevelY() && currentStage == 7)
	{
		LoadLevel(6);
		player->SetPos({ player->GetX(), 195 });
	}

	else if (player->SkullDoor == true && currentStage == 7) 
	{
		LoadLevel(8);
		player->SetPos({ 196, 87 });
	}

	else if (player->SkullDoor == true && currentStage == 8)
	{
		LoadLevel(7);
		player->SetPos({ 117, 63 });
	}
	
	else if (player->NextLevel() && currentStage == 8)
	{
		LoadLevel(9);
		player->SetPos({ 10, player->GetY() });
	}

	else if (player->PrevLevel() && currentStage == 9)
	{
		LoadLevel(8);
		player->SetPos({ 250, player->GetY() });
	}

	else if (player->NextLevelY() && currentStage == 9)
	{
		LoadLevel(11);
		player->SetPos({ player->GetX(), 26 });
	}
	
	else if (player->PrevLevelY() && currentStage == 11)
	{
		LoadLevel(9);
		player->SetPos({ player->GetX(), 195 });
	}

	else if (player->NextLevelY() && currentStage == 8)
	{
		LoadLevel(10);
		player->SetPos({ player->GetX(), 26 });
	}

	else if (player->PrevLevelY() && currentStage == 10)
	{
		LoadLevel(8);
		player->SetPos({ player->GetX(), 195 });
	}

	else if (player->NextLevel() && currentStage == 10)
	{
		LoadLevel(11);
		player->SetPos({ 10, player->GetY() });
	}

	else if (player->PrevLevel() && currentStage == 11)
	{
		LoadLevel(10);
		player->SetPos({ 250, player->GetY() });
	}

	else if (player->SkullDoor == true && currentStage == 11)
	{
		LoadLevel(12);
		player->SetPos({ 179, 55 });
	}

	else if (player->SkullDoor == true && currentStage == 12)
	{
		LoadLevel(11);
		player->SetPos({ 124, 175 });
	}

	level->Update();
	player->Update();
	enemy->Update();
	CheckCollisions();

}
void Scene::SetStage(int stage)
{
	this->currentStage = stage;
}
void Scene::Render()
{
	BeginMode2D(camera);

    level->Render();
	enemy->Draw();
	if (debug == DebugMode::OFF || debug == DebugMode::SPRITES_AND_HITBOXES)
	{
		RenderObjects(); 
		player->Draw();
	}
	if (debug == DebugMode::SPRITES_AND_HITBOXES || debug == DebugMode::ONLY_HITBOXES)
	{
		RenderObjectsDebug(YELLOW);
		player->DrawDebug(GREEN);
		enemy->DrawDebug(RED);
	}

	EndMode2D();

	RenderGUI();
}
void Scene::Release()
{
    level->Release();
	player->Release();
	enemy->Release();
	ClearLevel();
}
			
void Scene::CheckCollisions()
{
	
	AABB player_box, obj_box,attack_box,enemy_box;
	std::vector<Texture2D> collectedObjectSprites; 
	std::vector<Enemy*> enemies; 

	player_box = player->GetHitbox(); 
	auto it = objects.begin();

	
	if (player->GetState() == State::ATTACKING)
	{

		attack_box = player->GetAttackHitbox();
	}

	while (it != objects.end())
	{
		obj_box = (*it)->GetHitbox(); 
		if (player_box.TestAABB(obj_box)) 
		{
			
			if ((*it)->GetID() == ObjectType::KEY)
			{
				if (player->HasKey()){
					++it;
					continue;
				}
				else{
					player->setKey(true);
				}
			}
			else if ((*it)->GetID() == ObjectType::PONER_LLAVE){
				if (!player->HasKey()){
					++it;
					continue;
				}
				else{
					player->setKey(false);
				}
			}
			else if ((*it)->GetID() == ObjectType::HELMET)
			{
				Texture2D objectSprite = LoadTexture("path/to/your/Sprite_helmet.png"); 
				collectedObjectSprites.push_back(objectSprite);
			}

			
			else if ((*it)->GetID() == ObjectType::EXP)
			{
				player->IncrExp((*it)->EXPpoints());
			}
			
			PlaySound(sfxItem);
			
			player->IncrScore((*it)->Points());
			delete* it;
			it = objects.erase(it);
		}
		else{++it;}
	}

	auto enemy_it = enemies.begin();
	while (enemy_it != enemies.end())
	{
		enemy_box = (*enemy_it)->GetHitbox();
		
		if (player->GetState() == State::ATTACKING && player->attackBox.TestAABB(enemy_box))
		{
			player->IncrExp((*enemy_it)->EXPPoints()); 
			delete* enemy_it; 
			enemy_it = enemies.erase(enemy_it); 
		}
		else{
			++enemy_it;
		}
	}

	
	for (Enemy* enemy : enemies)
	{
		enemy_box = enemy->GetHitbox();
		if (player_box.TestAABB(enemy_box))
		{
			youLose = true;
			break;
		}
	}
}

void Scene::ClearLevel()
{
	for (Object* obj : objects)
	{
		delete obj;
	}
	objects.clear();
}
void Scene::RenderObjects() const
{
	for (Object* obj : objects)
	{
		obj->Draw();
	}
}
void Scene::RenderEnemies() const
{
	enemy->Draw();
}
void Scene::RenderObjectsDebug(const Color& col) const
{
	for (Object* obj : objects)
	{
		obj->DrawDebug(col);
	}
}
void Scene::RenderGUI() const
{
	
	const int barWidth = 90;  
	const int barHeight = 5;  
	const int margin = 1;    
	const int screenWidth = 34;
	const int screenHeight = 28;

	// Life
	int maxHealth = 100;
	int currentHealth = player->GetLives();
	float healthRatio = static_cast<float>(currentHealth) / maxHealth;
	int healthBarWidth = static_cast<int>(barWidth * healthRatio);

	// EXP
	int maxExp = 100;
	int currentExp = player->GetExp();
	float expRatio = static_cast<float>(currentExp) / maxExp;
	int expBarWidth = static_cast<int>(barWidth * expRatio);

	

	
	DrawText(TextFormat("SCORE: %d", player->GetScore()), 10, 4, 8, WHITE);

	
	
	DrawRectangle(110, 3, barWidth, barHeight, GRAY); 
	DrawRectangle(110, 3, healthBarWidth, barHeight, GREEN); 

	// Dibujar barra de experiencia
	
	DrawRectangle(110, 10, barWidth, barHeight, GRAY); 
	DrawRectangle(110, 10, expBarWidth, barHeight, BLUE); 

	// Dibujar etapa
	DrawText(TextFormat("STAGE: %d", currentStage), 210, 4, 8, WHITE);
}